1- Why we need to use OOP? Some major OOP languages?

    OOP organizes code into objects, which makes it more reusable, maintainable, and scalable. It allows for better modeling of real-world problems.
    Languages: Java, C++, Python, C#.

2- Interface vs Abstract Class?

    Interface: Contains only method signatures and can be implemented by multiple classes. Supports multiple inheritance.
    Abstract Class: Can have both abstract methods (no body) and concrete methods (with body). Supports single inheritance.

3- Why we need equals and hashcode? When to override?

    They ensure objects are compared based on their content, not memory address.
    Override when objects are stored in collections like HashMap to ensure proper behavior in methods like contains(), remove()..

4- Diamond problem in Java? How to fix it?

    Occurs when a class inherits the same method from multiple classes.
    As Ramazan teacher said, imagine an abstract Animal class. If two subclasses (Dog and Cat) override a method differently, a new class inheriting both wouldn't know which version to use.
    Java solves this by disallowing multiple inheritance in classes.

5- Why do we need a Garbage Collector? How does it run?

    Garbage Collector automatically frees memory by removing objects that are no longer needed.It runs in the background and can be triggered using System.gc(), though not guaranteed.

6- Java ‘static’ keyword usage?

    Variable: Shared across all instances of the class.
    Method: Can be called without creating an object of the class.
    Block: Runs when the class is loaded.

7- Immutability means? Where, How and Why to use it?

    Immutable objects cannot be modified after creation.
    It is used for thread safety and to prevent unwanted changes to objects, especially when sharing data across threads.

8- Composition and Aggregation means and differences?

    Composition: Strong "Has-A" relationship (e.g., a Car "Has-A" Engine). If the parent object is deleted, so are the children.
    Aggregation: Weaker "Has-A" relationship (e.g., a University "Has-A" Student). The child can exist independently of the parent.

9- Cohesion and Coupling means and differences?

    Cohesion: Refers to how related the methods in a class are. High cohesion is good.
    Coupling: Refers to how dependent one class is on another. Low coupling is preferred.

10- Heap and Stack means and differences?

    Stack: Stores local variables and method calls in a Last-In-First-Out order.
    Heap: Stores objects created during runtime, managed by Garbage Collector.

11 - Exception means? Type of Exceptions?

    Exceptions are unexpected errors in the program.
    Checked: Must be handled during compile time (IOException).
    Unchecked: Runtime errors that can occur during execution (NullPointerException).

12 - How to summarize ‘clean code’ as short as possible?

    Simple, readable, maintainable, reusable.

13 - What is the method of hiding in Java?

    Method hiding occurs when a child class defines a static method with the same signature as the parent class, making the parent’s method hidden, not overridden.

14- What is the difference between abstraction and polymorphism in Java?

    Abstraction: Hides implementation details, showing only essential features. Example: A Car class hides engine complexity.
    Polymorphism: Allows methods to act differently based on the object calling them. Example: Both Dog and Cat have a makeSound() method but produce different sounds.
